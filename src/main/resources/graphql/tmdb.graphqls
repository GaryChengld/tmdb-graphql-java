schema {
    query: Query
}

scalar Date

type Query {
    movieDetail(id: Int!): MovieDetail
    movieNowPlaying(page: Int! = 1, region: String): MoviePageResults
}

type BaseMovie {
    id: Int!
    adult: Boolean!
    title: String!
    overview: String
    popularity: Float
    originalTitle: String
    originalLanguage: String
    backdropPath: String
    posterPath: String
    genres: [Genre]
    voteAverage: Float
    voteCount: Int
    releaseDate: Date
}

type MovieDetail {
    id: Int!
    adult: Boolean!
    title: String!
    overview: String
    popularity: Float
    originalTitle: String
    originalLanguage: String
    backdropPath(size: ImageSize = ORIGINAL): String
    posterPath(size: ImageSize = ORIGINAL): String
    genres: [Genre]
    voteAverage: Float
    voteCount: Int
    releaseDate: Date
    imdbId: String
    status: String
    runtime: Int    
    tagLine: String
    budget: Int
    revenue: Int
    productionCountries: [Country]
    productionCompanies: [BaseCompany]
    spokenLanguages: [String]
}

type MoviePageResults {
    page: Int!
    totalPages: Int!
    totalResults: Int!
    results: [BaseMovie]
}

type BaseCompany {
    id: Int!
    name: String!    
    originCountry: String
    logoPath(size: ImageSize = ORIGINAL): String
}

type Genre {
    id: Int!
    name: String!
}

type Country {
    code: String!
    name: String!
}

enum ImageSize {
    S
    M
    L
    ORIGINAL
}